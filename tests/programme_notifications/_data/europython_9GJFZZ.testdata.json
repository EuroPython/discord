{"session":{"id":"9GJFZZ","code":"9GJFZZ","slug":"dynamically-generated-methods","title":"Dynamically generated methods with a non-generic signature","description":"Title:\r\nDynamically generated methods with a non-generic signature\r\n\r\nAbstract:\r\nIn other words, Descriptors + PEP-362 (function signature object) and a seasoning of PEP-487 (simpler customization of class creation via `__init_subclass__`).\r\n\r\nThere are different ways to have generated methods and attributes attached to all classes in a library, and this talk presents the way we’re doing it in scikit-learn. Here you’ll understand the use-case, and see the details and challenges presented by it, and how we approached them.\r\n\r\nLong:\r\nThe use-case we study here goes as: we would like to add methods to all `Estimator`s, which are all subclasses of the `BaseEstimator`. The signature of the methods generated depends on the signature of other methods existing in those subclasses, but we also want to give the option of modifying generated methods without having to change the existing methods.\r\n\r\nThe solution we present involves a few concepts which we’ll explain during the talk:\r\nInvestigate the existing methods’ signature using `inspect`\r\nManually traverse MRO (method resolution order) and inspect class attributes allowing for modifications on what the `inspect` has concluded\r\nUse a descriptor to generate methods accordingly\r\nUse PEP-362 to attach a signature object to the generated methods\r\nDynamically generate docstrings for those methods\r\nUse PEP-487, aka `__init_subclass__`, to attach those methods to child classes when appropriate\r\n\r\nThis is a hands-on talk, explaining each concept in isolation and then showing how they fit together, and we’ll be presenting and testing code during the talk.","abstract":"In other words, Descriptors + PEP-362 (function signature object) and a seasoning of PEP-487 (simpler customization of class creation via `__init_subclass__`).\r\n\r\nThere are different ways to have generated methods and attributes attached to all classes in a library, and this talk presents the way we’re doing it in scikit-learn. Here you’ll understand the use-case, and see the details and challenges presented by it, and how we approached them.","duration":30,"speakers":[{"name":"Adrin Jalali","avatar":"https://europython.com/media/avatars/Farb3SW3229-w-small_mpaHfiN.png","bio":"Adrin works on skops which tackles some of the MLOps challenges related to scikit-learn models. He has a PhD in Bioinformatics, has worked as a consultant, and in an algorithmic privacy and fairness team. He's also a core developer of scikit-learn and fairlearn.","code":"HGSWKF","slug":"adrin-jalali"}],"tags":[],"track":"Python Internals & Ecosystem","type":"Talk","length":"45","experience":"advanced","room":null,"slidesUrl":null}}
